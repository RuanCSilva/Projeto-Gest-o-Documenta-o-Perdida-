import React, { useState, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { View, Text, TextInput, Button, FlatList, Alert, StyleSheet, TouchableOpacity } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const Stack = createStackNavigator();

// Componente para Listagem de Documentos Perdidos
const DocumentoItem = ({ descricao, local }) => (
  <View style={styles.listItem}>
    <Text style={styles.listTitle}>{descricao}</Text>
    <Text style={styles.listSubtitle}>Local: {local}</Text>
  </View>
);

// Tela Principal
const HomeScreen = ({ navigation }) => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Sistema de Gestão de Documentos Perdidos</Text>
      <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Cadastro')}>
        <Text style={styles.buttonText}>Cadastrar Documento Perdido</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Busca')}>
        <Text style={styles.buttonText}>Buscar Documento</Text>
      </TouchableOpacity>
    </View>
  );
};

// Tela de Cadastro
const CadastroScreen = ({ navigation }) => {
  const [descricao, setDescricao] = useState('');
  const [local, setLocal] = useState('');

  const handleCadastro = async () => {
    if (!descricao || !local) {
      Alert.alert('Erro', 'Preencha todos os campos!');
      return;
    }

    const novoDocumento = { id: Date.now().toString(), descricao, local };
    
    try {
      const documentosExistentes = await AsyncStorage.getItem('documentos');
      const documentos = documentosExistentes ? JSON.parse(documentosExistentes) : [];
      documentos.push(novoDocumento);
      await AsyncStorage.setItem('documentos', JSON.stringify(documentos));

      Alert.alert('Sucesso', 'Documento cadastrado com sucesso!');
      navigation.goBack();
    } catch (error) {
      Alert.alert('Erro', 'Não foi possível salvar o documento.');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.subtitle}>Cadastro de Documento Perdido</Text>
      <TextInput
        placeholder="Descrição do documento"
        style={styles.input}
        value={descricao}
        onChangeText={setDescricao}
      />
      <TextInput
        placeholder="Local onde foi encontrado"
        style={styles.input}
        value={local}
        onChangeText={setLocal}
      />
      <TouchableOpacity style={styles.button} onPress={handleCadastro}>
        <Text style={styles.buttonText}>Registrar</Text>
      </TouchableOpacity>
    </View>
  );
};

// Tela de Busca
const BuscaScreen = () => {
  const [query, setQuery] = useState('');
  const [resultados, setResultados] = useState([]);
  const [todosDocumentos, setTodosDocumentos] = useState([]);

  useEffect(() => {
    const carregarDocumentos = async () => {
      try {
        const documentosSalvos = await AsyncStorage.getItem('documentos');
        if (documentosSalvos) {
          setTodosDocumentos(JSON.parse(documentosSalvos));
        }
      } catch (error) {
        Alert.alert('Erro', 'Não foi possível carregar os documentos.');
      }
    };
    carregarDocumentos();
  }, []);

  const handleBusca = () => {
    const filtrados = todosDocumentos.filter((item) =>
      item.descricao.toLowerCase().includes(query.toLowerCase())
    );
    setResultados(filtrados);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.subtitle}>Buscar Documento Perdido</Text>
      <TextInput
        placeholder="Digite o nome ou descrição"
        style={styles.input}
        value={query}
        onChangeText={setQuery}
      />
      <TouchableOpacity style={styles.button} onPress={handleBusca}>
        <Text style={styles.buttonText}>Buscar</Text>
      </TouchableOpacity>
      <FlatList
        data={resultados}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => <DocumentoItem descricao={item.descricao} local={item.local} />}
        ListEmptyComponent={<Text style={styles.emptyText}>Nenhum documento encontrado.</Text>}
      />
    </View>
  );
};

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Cadastro" component={CadastroScreen} />
        <Stack.Screen name="Busca" component={BuscaScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

// Estilos aprimorados
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f4f4f4',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 20,
    fontWeight: '600',
    textAlign: 'center',
  },
  input: {
    width: '100%',
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    padding: 12,
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  button: {
    backgroundColor: '#007BFF',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
    width: '100%',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  listItem: {
    width: '100%',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    backgroundColor: '#fff',
    borderRadius: 8,
    marginBottom: 10,
  },
  listTitle: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  listSubtitle: {
    fontSize: 14,
    color: '#555',
  },
  emptyText: {
    marginTop: 20,
    fontSize: 16,
    color: '#888',
  },
});
